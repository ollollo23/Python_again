class Vertex:
    def __init__(self):
        self._links = list()
        
        @property
        def links(self):
            return self._links


class Link:
    def __init__(self, v1, v2):
        self._dist = 1
        self._v1 = v1
        self._v2 = v2
    
    @property
    def v1(self):
        return self._v1

    @property
    def v2(self):
        return self._v2
    
    @property
    def dist(self):
        return self._dist
    
    @dist.setter
    def dist(self, value):
        self._dist = value


class LinkedGraph:
    def __init__(self):
        self._links = list()
        self._vertex = list()

    def add_vertex(self, v):
        if v not in self._vertex:
            self._vertex.append(v)

    def add_link(self, link):
        self.add_vertex(link.v1)
        self.add_vertex(link.v2)
        if self.check_link(link):
            self._links.append(link)

    def check_link(self, link):
        for a in self._links:
            if {link.v1, link.v2} == {a.v1, a.v2}:
                return False
        return True

    def road_link(self, start_vert, finish_vert):
        self.step_v = finish_vert
        self.ret_link = []
        self.ret_vert = [finish_vert]

        while self.step_v != start_vert:
            self.road = self.dic[self.step_v][0]

            for a in self.step_v._links:
                if (self.road - a.dist) == self.dic[a.v1][0]:
                    self.step_v = a.v1
                    self.ret_link.insert(0, a)
                    break
                elif (self.road - a.dist) == self.dic[a.v2][0]:
                    self.step_v = a.v2
                    self.ret_link.insert(0, a)
                    break

            self.ret_vert.insert(0, self.step_v)

        return self.ret_vert, self.ret_link

    def find_path(self, start_v, stop_v):
        self.dic = {k:[0] for k in self._vertex}
        self.matrix = []
        self.cop_vertex = self._vertex.copy()
        self.vert_min = None
        self.step_vert = start_v
        self.flag = True
        self.sum_dist = 0

        while self.flag:

            for a in self._links:
                if self.step_vert in {a.v1, a.v2} and a.v1 in self.cop_vertex and a.v2 in self.cop_vertex:
                    l_k = [a.v1, a.v2]
                    l_k[0]._links.append(a)
                    l_k[1]._links.append(a)
                    l_k.remove(self.step_vert)
                    self.matrix.append(l_k[0])

                    if self.dic[l_k[0]][0] == 0:
                        self.sum_dist = self.dic[self.step_vert][0] + a.dist
                        self.dic[l_k[0]][0] = self.sum_dist
                    elif (self.dic[self.step_vert][0] + a.dist) < self.dic[l_k[0]][0]:
                        self.dic[l_k[0]][0] = self.dic[self.step_vert][0] + a.dist


            if len(self.matrix) > 0:
                self.vert_min = self.matrix[0]

            for a in self.matrix:
                if self.dic[a][0] < self.dic[self.vert_min][0]:
                    self.vert_min = a

            if len(self.matrix) > 0:
                self.matrix.remove(self.vert_min)

            if self.step_vert in self.cop_vertex:
                self.cop_vertex.remove(self.step_vert)
            self.step_vert = self.vert_min

            if len(self.cop_vertex) == 0:
                self.flag = False

        self.res = self.road_link(start_v, stop_v)

        return self.res[0], self.res[1]


class Station(Vertex):
    def __init__(self, name):
        self.name = name
        super().__init__()

    def __str__(self):
        return f'{self.name}'

    def __repr__(self):
        return f'{self.name}'


class LinkMetro(Link):
    def __init__(self, v1, v2, dist):
        super().__init__(v1, v2)
        self.dist = dist

########################################################################
# map_metro = LinkedGraph()
#
#
# v1 = Station("один")
# v2 = Station("два")
# v3 = Station("три")
# v4 = Station("четыре")
# v5 = Station("пять")
# v6 = Station("шесть")
# v7 = Station("семь")
# v8 = Station("восемь")
# v9 = Station("девять")
#
#
#
# map_metro.add_link(LinkMetro(v1, v2, 1))
# map_metro.add_link(LinkMetro(v2, v3, 3))
# map_metro.add_link(LinkMetro(v3, v4, 3))
# map_metro.add_link(LinkMetro(v4, v5, 3))
# map_metro.add_link(LinkMetro(v1, v7, 2))
# map_metro.add_link(LinkMetro(v7, v6, 1))
# map_metro.add_link(LinkMetro(v6, v5, 1))
# map_metro.add_link(LinkMetro(v4, v8, 4))
# map_metro.add_link(LinkMetro(v6, v8, 3))
# map_metro.add_link(LinkMetro(v5, v8, 2))
# map_metro.add_link(LinkMetro(v8, v9, 1))
#
#
#
#
# path = map_metro.find_path(v1, v9)
# print(path[0])


map2 = LinkedGraph()
v1 = Vertex()
v2 = Vertex()
v3 = Vertex()
v4 = Vertex()
v5 = Vertex()

map2.add_link(Link(v1, v2))
map2.add_link(Link(v2, v3))
map2.add_link(Link(v2, v4))
map2.add_link(Link(v3, v4))
map2.add_link(Link(v4, v5))

assert len(map2._links) == 5, "неверное число связей в списке _links класса LinkedGraph"
assert len(map2._vertex) == 5, "неверное число вершин в списке _vertex класса LinkedGraph"

map2.add_link(Link(v2, v1))
assert len(map2._links) == 5, "метод add_link() добавил связь Link(v2, v1), хотя уже имеется связь Link(v1, v2)"

path = map2.find_path(v1, v5)
s = sum([x.dist for x in path[1]])
assert s == 3, "неверная суммарная длина маршрута, возможно, некорректно работает объект-свойство dist"

assert issubclass(Station, Vertex) and issubclass(LinkMetro, Link), "класс Station должен наследоваться от класса Vertex, а класс LinkMetro от класса Link"

map2 = LinkedGraph()
v1 = Station("1")
v2 = Station("2")
v3 = Station("3")
v4 = Station("4")
v5 = Station("5")

map2.add_link(LinkMetro(v1, v2, 1))
map2.add_link(LinkMetro(v2, v3, 2))
map2.add_link(LinkMetro(v2, v4, 7))
map2.add_link(LinkMetro(v3, v4, 3))
map2.add_link(LinkMetro(v4, v5, 1))

assert len(map2._links) == 5, "неверное число связей в списке _links класса LinkedGraph"
assert len(map2._vertex) == 5, "неверное число вершин в списке _vertex класса LinkedGraph"

path = map2.find_path(v1, v5)

assert str(path[0]) == '[1, 2, 3, 4, 5]', path[0]
s = sum([x.dist for x in path[1]])
assert s == 7, "неверная суммарная длина маршрута для карты метро"
